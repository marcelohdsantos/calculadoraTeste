{"remainingRequest":"/home/marcelo/exercicios-cod3r-web/vue/calculator/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/marcelo/exercicios-cod3r-web/vue/calculator/src/main/Calculator.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/marcelo/exercicios-cod3r-web/vue/calculator/src/main/Calculator.vue","mtime":1617820784262},{"path":"/home/marcelo/exercicios-cod3r-web/vue/calculator/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/marcelo/exercicios-cod3r-web/vue/calculator/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/marcelo/exercicios-cod3r-web/vue/calculator/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/marcelo/exercicios-cod3r-web/vue/calculator/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/marcelo/exercicios-cod3r-web/vue/calculator/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5jYWxjdWxhdG9yIHsKICAgIGhlaWdodDogMzIwcHg7CiAgICB3aWR0aDogMjM1cHg7CiAgICBib3JkZXItcmFkaXVzOiA1cHg7CiAgICBvdmVyZmxvdzogaGlkZGVuOwoKICAgIGRpc3BsYXk6IGdyaWQ7CiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCg0LCAyNSUpOwogICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiAxZnIgNDhweCA0OHB4IDQ4cHggNDhweCA0OHB4Owp9Cg=="},{"version":3,"sources":["Calculator.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2FA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"Calculator.vue","sourceRoot":"src/main","sourcesContent":["<template>\n  <div class=\"calculator\">\n      <Display :value=\"displayValue\"/>\n      <Button label=\"AC\" triple @onClick=\"clearMemory\"/>\n      <Button label=\"/\" operation @onClick=\"setOperation\"/>\n      <Button label=\"7\" @onClick=\"addDigit\"/>\n      <Button label=\"8\" @onClick=\"addDigit\"/>\n      <Button label=\"9\" @onClick=\"addDigit\"/>\n      <Button label=\"*\" operation @onClick=\"setOperation\"/>\n      <Button label=\"4\" @onClick=\"addDigit\"/>\n      <Button label=\"5\" @onClick=\"addDigit\"/>\n      <Button label=\"6\" @onClick=\"addDigit\"/>\n      <Button label=\"-\" operation @onClick=\"setOperation\"/>\n      <Button label=\"1\" @onClick=\"addDigit\"/>\n      <Button label=\"2\" @onClick=\"addDigit\"/>\n      <Button label=\"3\" @onClick=\"addDigit\"/>\n      <Button label=\"+\" operation @onClick=\"setOperation\"/>\n      <Button label=\"0\" double @onClick=\"addDigit\"/>\n      <Button label=\".\" @onClick=\"addDigit\"/>\n      <Button label=\"=\" operation @onClick=\"setOperation\"/>\n  </div>\n</template>\n\n<script>\n\nimport Button from \"../components/Button\"\nimport Display from \"../components/Display\"\nexport default {\n    data: function() {\n        return {\n            displayValue: \"0\",\n            clearDisplay: false,\n            operation: null,\n            values: [0, 0],\n            current: 0\n        }\n    },\n    components: { Button, Display },\n    methods: {\n        clearMemory() {\n            Object.assign(this.$data, this.$options.data())\n        },\n        setOperation(operation) {\n            if (this.current === 0) {\n                this.operation = operation\n                this.current = 1\n                this.clearDisplay = true\n            } else {\n                const equals = operation === \"=\"\n                const currentOperation = this.operation\n                try {\n                    this.values[0] = eval(\n                        `${this.values[0]} ${currentOperation} ${this.values[1]}`\n                    )\n                } catch (e) {\n                    this.$emit('onError', e)\n                }\n                this.values[1] = 0\n                this.displayValue = this.values[0]\n                this.operation = equals ? null : operation\n                this.current = equals ? 0 : 1\n                this.clearDisplay = !equals\n            }\n        },\n        addDigit(n) {\n            if (n === \".\" && this.displayValue.includes(\".\")) {\n                return\n            }\n            const clearDisplay = this.displayValue === \"0\"\n                || this.clearDisplay\n            const currentValue = clearDisplay ? \"\" : this.displayValue\n            const displayValue = currentValue + n\n            this.displayValue = displayValue\n            this.clearDisplay = false\n            \n            // Alternativa 1\n            this.values[this.current] = displayValue\n            \n            // Alternativa 2\n            // if (n !== \".\") {\n            //     const i = this.current\n            //     const newValue = parseFloat(displayValue)\n            //     this.values[i] = newValue\n            // }\n        }\n    }\n}\n\n</script>\n\n<style>\n    .calculator {\n        height: 320px;\n        width: 235px;\n        border-radius: 5px;\n        overflow: hidden;\n\n        display: grid;\n        grid-template-columns: repeat(4, 25%);\n        grid-template-rows: 1fr 48px 48px 48px 48px 48px;\n    }\n</style>"]}]}